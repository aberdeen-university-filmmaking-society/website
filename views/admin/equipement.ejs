<%- include header.ejs %>
<style>
        .toggle + label {
            width:80px;
            height:40px;
            border-radius: 40px;
        }
        input.toggle + label:after {
  width: 42px;
  background-color: #fff;
  border-radius: 100%;
  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.2);
  transition: all 0.4s;
}
input.toggle:checked + label:after {
  margin-left: 40px;
}
input.toggle + label:before {
    border-radius: 20px;
}
input.toggle:checked + label:before {
    background-color: rgb(129, 0, 0);
}
.togglecontainer{
    margin-left:50%;
    transform: translateX(-44px);
}
.bn-togglelabel{
    font-size:16px;
    display: block;
    font-weight: bold;
    text-align: center;
    width:100%;
    user-select: none;
    cursor: pointer;
}
.togglecontainercontainer{
    width:100%;
    padding:12px;
    background-color:rgba(0, 0, 0, 0.025);
    box-sizing: border-box;
    border-radius: 6px;
    margin-bottom: 12px;
}

    </style>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@5.1.0/main.min.js" integrity="sha256-whipTPgW7h5J4dASYqBjimA0wUdvXKQuecTKB5wOkxk=" crossorigin="anonymous"></script>
<style href="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@5.1.0/main.min.css"></style>
<div class="section" style="max-width: 2000px;flex-basis: 700px;">
    <div class="sectionheader">Booking calendar</div>
    <div id="calendar"></div>
</div>
<div class="section" style="flex-basis:700px;">
    <div class="sectionheader">Equipement</div>
    <div style="display: none;font-size:12px;font-weight: normal;margin-top:4px;">Drag to reorder</div>
    <ul class="postlist" style="margin-top: -12px;margin-bottom: -12px;">
        <% if(locals.equipement) { %>
            <% equipement.forEach(equip=>{ %>
            <li class="postitem" style="padding:10px 24px;" data-id="<%= equip.id %>" data-position="<%= equip.position %>">
                <div style="margin-right:174px;">
                    <h4><%= equip.name %></h4>
                    <h5><%= equip.description %></h5>
                    <h6><%= equip.category %></h6>
                </div>
                <div class="actions">
                    <button onclick="editEquipement('<%= equip.id %>')"><i class="far fa-edit"></i></button>
                    <button onclick="removeEquipement('<%= equip.id %>')"><i class="far fa-trash-alt"></i></button>
                </div>
            </li>
            <% }); %>
        <% } %>
        </ul><br>
    <button class="smallbtn" onclick="addEquipementModal(true)">Add equipement</button>
</div>
<div id="modal-equipement" class="modal">
    <div id="modal-equipement-header" class="sectionheader">Add Equipement</div>
    <input id="createequipement-name" type="text" class="smaller" placeholder="Name ('Neewer Light Stand')" autocomplete="off"><br>
    <input id="createequipement-description" type="text" class="smaller" placeholder="Description ('2m stand, compatible with the LED Panels and the SLB60')" autocomplete="off"><br>
    <input id="createequipement-image" type="text" class="smaller" placeholder="Image URL" autocomplete="off"><br>
    <input id="createequipement-category" type="text" class="smaller" placeholder="Category (e.g. Light equipement)" autocomplete="off"><br>
    <button class="bigbtn" onclick="saveEquipement()">SAVE</button>
</div>
    <script>

let editingid;
let editingposition;

$('.postlist').sortable({
                    stop:function(){
                        updatePositions();
                    },
                    animation:150,
                    axis:'y'
                });

function updatePositions(){
    let positionChanges = [];
    
    $('.postlist .postitem').each(function(i,el){
        let item = $(el);
        if(item.attr('data-position') != i){
            item.attr('data-position', i);
            positionChanges.push({id: item.attr('data-id'), position: item.attr('data-position')});
        }
    });
    if(positionChanges && positionChanges.length>0){
        $(".postlist").sortable("disable");
        $.ajax({
            type: "POST",
            url: '/admin/equipement/items/reposition',
            dataType: 'text',
            contentType: "application/json",
            data: JSON.stringify(positionChanges),
            success: function (res) {
                $(".postlist").sortable("enable");
            },
            error:function(err){
                alert("Failed to reposition equipement items!");
                $(".postlist").sortable("enable");
            }
        });
    }
}

function generateEquipementObject(){
    return{
        name:$("#createequipement-name").val(),
        description:$("#createequipement-description").val(),
        image:$("#createequipement-image").val(),
        category:$("#createequipement-category").val()
    }
}

function editEquipement(id){
    $.ajax({
            type: "GET",
            url: '/admin/equipement/items/' + id,
            success: function (res) {
                $("#createequipement-name").val(res.name);
                $("#createequipement-description").val(res.description);
                $("#createequipement-image").val(res.image);
                $("#createequipement-category").val(res.category);
                editingid = id;
                editingposition = res.position;
                $("#modal-equipement-header").text("Edit Equipement");
                addEquipementModal();
            }
        });
}
function removeEquipement(id) {
        if(confirm("Are you absolutely sure you want to delete this item? Any bookings for it will be unreversebly deleted!")){
            $.ajax({
            type: "POST",
            url: '/admin/equipement/items/remove/' + id,
            success: function (res) {
                $(`.postlist [data-id='${id}']`).remove();
            }
        });
        }
    }

function saveEquipement() {
        var equipementObject = generateEquipementObject();
        if (editingid) {
            equipementObject.position = editingposition;
            equipementObject.id = editingid;
            
            $.ajax({
                
                type: "POST",
                url: '/admin/equipement/items/edit/' + editingid,
                dataType: 'text',
                contentType: "application/json",
                async: true,
                //json object to sent to the authentication url
                data: JSON.stringify(equipementObject),
                success: function (res) {
                    console.log("edit successful");
                    $(`.postlist [data-id='${editingid}']`).remove();
                    addEquipementToUI(equipementObject);
                    $.modal.close();
                    //TODO add equipement to DOM
                },
                error: function (res) {
                    if (res.errors != undefined) {
                        var alertText = "";
                        alert(res.errors.join("\n"));
                    }
                },
            });
        } else {
            equipementObject.position = equipementObject.length != undefined ? equipementObject.length : 0; //if the length isn't undefined, return it. Otherwise, return 0
            $.ajax({
                type: "POST",
                url: '/admin/equipement/items/create',
                dataType: 'text',
                contentType: "application/json",
                async: true,
                //json object to sent to the authentication url
                data: JSON.stringify(equipementObject),
                success: function (res) {
                    $.modal.close();
                    addEquipementToUI(JSON.parse(res));
                    //TODO add equipement to DOM
                },
                error: function (res) {
                    if (res.errors != undefined) {
                        var alertText = "";
                        alert(res.errors.join("\n"));
                    }
                },
            });
        }
    }

function addEquipementModal(blank){
    if(blank){
        $("#createequipement-name").val('');
        $("#createequipement-description").val('');
        $("#createequipement-image").val('');
        $("#createequipement-category").val('');
    }
    $("#modal-equipement").modal();
}


function sortPostItems(a,b) {
    const startA = parseInt($(a).data('position'));
    const startB = parseInt($(b).data('position'));	
    return startA - startB;
}
function addEquipementToUI(equipementObject){
    $(".postlist").append(`<li class="postitem" style="padding:10px 24px;" data-id="${equipementObject.id}" data-position="${equipementObject.position}">
        <div style="margin-right:174px;">
            <h4>${equipementObject.name}</h4>
            <h5>${equipementObject.description}</h5>
        </div>
        <div class="actions">
            <button onclick="editEquipement('${equipementObject.id}')"><i class="far fa-edit"></i></button>
            <button onclick="removeEquipement('${equipementObject.id}')"><i class="far fa-trash-alt"></i></button>
        </div>
    </li>`);
    $('.postlist').html($('.postlist .postitem').sort(sortPostItems))
}

$("#modal-equipement").on($.modal.CLOSE, function(event,modal){
    editingid = undefined;
    $("#modal-equipement-header").text("Add Equipement");
});

document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'resourceTimelineAcademicYear',
            slotMinWidth:22,
            schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
            resourceGroupField: 'category',
            nowIndicator:true,
            now: new Date(),
            scrollTime: new Date(),
            contentHeight: "auto",
            slotLabelFormat: [
                {year:"numeric"},
                {month:"long"},
                {day:"2-digit"}
            ],
            views:{
                resourceTimelineAcademicYear: {
                    type: 'resourceTimeline',
                    visibleRange: {
                        start: '2019-09-01',
                        end: '2020-08-31'
                    }
                }
            },

            resources: [
                { category: 'Camera bag', title: 'Canon 650D + 32GB SD' },
                { category: 'Camera bag', title: '2 Extra batteries' },
                { category: 'Camera bag', title: '2-Power Battery charger' },
                { category: 'Camera bag', title: 'Canon 50mm Lens' },
                { category: 'Camera bag', title: 'Canon 18-55mm Lens' },
                { category: 'Camera bag', title: 'Rode on-camera mic + deadcat' },
                { category: 'Camera bag', title: 'Focus lever' },
                { category: 'Audio', title: 'Zoom H4N Recorder + 8GB SD + Case' },
                { category: 'Audio', title: 'Belt to hook up Zoom to' },
                { category: 'Audio', title: 'Audio XLR Cable' },
                { category: 'Audio', title: 'Rode NTG-2 Microphone + foam cover' },
                { category: 'Audio', title: 'Rode Boom + Deadcat' },
                { category: 'Audio', title: 'Rode Boom Pole' },
                { category: 'Grip', title: 'Manfrotto Tripod + Fluidhead + case + 2 quick-releases' },
                { category: 'Grip', title: 'Glidecam' },
                { category: 'Grip', title: 'Shoulder Rig' },
                { category: 'Grip', title: '2x Neewer Flat LED Dimmable lights' },
                { category: 'Grip', title: '1x Neewer SLB60B' },
                { category: 'Grip', title: 'Glidecam' },
                { category: 'Grip', title: 'Dolly + Dolly tracks' },
                { category: 'Grip', title: '3x Neewer light stands' },
                { category: 'Grip', title: 'Neewer 4-side reflector' },
                { category: 'DIT', title: 'WP Hard Drive 931GB' },
                { category: 'Grip', title: 'Seagate 931GB Hard Drive' },
            ]
        });
        calendar.render();
      });
    </script>
</div>
</div>
