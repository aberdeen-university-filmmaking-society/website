<%- include header.ejs %>
<style>

    #equipmentlist .postitem {
        cursor: move;
    }

    .postitem>img {
        width: 32px;
        height: 48px;
        float: left;
        margin-right: 12px;
        object-fit: contain;
    }

    .bookingheader {
        cursor: pointer;
    }

    .eqBookings {
        margin: 12px -24px;
    }

    .eqName {
        font-size: 12px;
        opacity: 0.6;
        font-weight: 500;
    }

    .eqBooking {
        display: flex;
        border-top: rgb(213, 213, 213) 1px solid;
        position: relative;
        height: 32px;
        line-height: 32px;
        padding: 0px 24px;
        transition: background-color 0.2s;
    }

    .eqBooking:last-child {
        border-bottom: rgb(213, 213, 213) 1px solid;
    }

    .eqBooking:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .eqBooking.eventhover {
        background-color: rgba(0, 0, 0, 0.1);
    }


    .eqActions {
        height: 32px;
        margin-right: 24px
    }

    .eqActions button {
        height: 32px !important;
        width: 32px !important;
        padding: 0px !important;
        font-size: 14px !important;
    }

    .eqActions button.confirm {
        color: rgb(5, 117, 63);
    }

    .eqActions button.confirm:hover {
        background-color: rgba(5, 117, 63, 0.25)
    }

    .eqActions button.confirm.hover {
        background-color: rgba(5, 117, 63, 0.25)
    }

    .eqActions button.confirm:active {
        background: rgba(5, 117, 63, 0.5);
    }

    .eqActions button.confirm.select {
        background: rgba(5, 117, 63, 1);
        color: white;
    }

    .eqActions button.deny {
        color: rgb(117, 5, 20);
    }

    .eqActions button.deny:hover {
        background-color: rgba(117, 5, 20, 0.25)
    }

    .eqActions button.deny.hover {
        background-color: rgba(117, 5, 20, 0.25)
    }

    .eqActions button.deny:active {
        background: rgba(117, 5, 20, 0.5);
    }

    .eqActions button.deny.select {
        background: rgb(117, 5, 20);
        color: white;
    }

    .eqActions button.edit {
        color: rgb(169, 110, 0);
    }

    .eqActions button.edit:hover {
        background-color: rgba(169, 110, 0, 0.25)
    }

    .eqActions button.edit.hover {
        background-color: rgba(169, 110, 0, 0.25)
    }

    .eqActions button.edit:active {
        background: rgba(169, 110, 0, 0.5);
    }

    .eqActions button.edit.select {
        background: rgb(169, 110, 0);
        color: white;
    }


    .eqActions .eqName {
        font-weight: 500;
        font-size: 12px;
    }

    .timespan {
        margin-left: 24px;
        font-size: 12px;
        font-weight: bold;
        margin-bottom: 4px;
        margin-top: 6px;
        position: relative;
        height: 32px;
    }

    .timespan .eqActions {
        margin-top: 4px;
    }

    .timespan>span {
        position: absolute;
        bottom: 4px;
    }

    .calendarEvent-projectname {
        font-size: 11px;
        font-weight: bold;
    }

    .calendarEvent-length {
        font-size: 9px;
    }

    .eventhover {
        opacity: 1;
    }

    .fc-timeline-event {
        transition: opacity 0.2s;
    }

    .postitem {
        transition: opacity 0.2s;
    }

    .ignored {
        opacity: 0.15;
    }

    .partialignored {
        opacity: 0.6;
    }

    #bookingbatches .postitem.ignored {
        opacity: 0.5;
    }

    #bookingbatches.postlist .postitem {
        transition: background-color 0.2s;
    }

    #bookingbatches.postlist li:nth-child(odd) {
        background: transparent;
    }

    .postitem.batchhover {
        background-color: rgba(0, 0, 0, 0.05) !important;
    }

    .nopointer {
        pointer-events: none;
    }

    .fc-timeline-event {
        cursor: pointer;
    }

    .fc-event-draggable::before {
        content: "";
        position: absolute;
        left: -4px;
        width: 8px;
        height: 8px;
        background-color: white;
        border-radius: 8px;
        border: solid black 1px;
        z-index: 10;
        pointer-events: none;
    }

    .fc-event-draggable::after {
        content: "";
        position: absolute;
        right: -4px;
        width: 8px;
        height: 8px;
        background-color: white;
        border-radius: 8px;
        border: solid black 1px;
        z-index: 10;
        pointer-events: none;
    }

    .fc-event-draggable {
        cursor: move !important;
    }

    .studentDetails {
        font-size: 11px;
        position: relative;
        margin: 12px 0;
    }

    .studentDetails p {
        margin: 0;
    }

    .studentDetails>i {
        position: absolute;
    }

    .studentDetails>div {
        margin-left: 16px;
    }

    .requestBigContainer {
        min-width: 400px;
        border-right: rgb(213, 213, 213) solid 1px;
        margin-right: 12px;
        margin-top: -12px;
        padding-top: 12px;
        position: relative;
    }

    .requestContainer {
        position: absolute;
        width: calc(100% + 12px);
        height: calc(100% - 36px);
        bottom: -12px;
        margin-left: -12px;
        overflow-y: scroll;
        overflow-x: hidden;
    }

    .requestContainer>.postlist {
        margin: 0;
    }

    .requestContainer>.postlist .postitem {
        border-top: rgb(213, 213, 213) solid 1px;
    }

    .requestContainer>.postlist .postitem:last-child {
        border-bottom: rgb(213, 213, 213) solid 1px;
    }

    #contextmenu {
        background-color: white;
        box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3);
        padding: 6px;
        display: none;
        width: fit-content;
        z-index: 1;
        border-radius: 4px;
    }

    #contextmenu .actions {
        position: relative;
        margin: 0;
    }

    .filterPanel{
        padding: 16px;
        position: absolute;
        right: 24px;
        top: 42px;
        background-color: white;
        box-shadow: 0px 0px 12px rgba(0,0,0,0.25);
        border-radius: 6px;
    }
    .fc-header-toolbar{
        justify-content:center !important;
    }
    .fc-toolbar-chunk{
        margin: 0 12px;
    }
    .filterbutton{
        position: absolute;
        right: 16px;
        top: -12px;
        font-weight: bold;
        font-size: 12px;
        line-height: 24px;
        cursor: pointer;
        padding: 12px;
        user-select: none;
    }
    .filterbutton:hover{
        background-color: rgba(0,0,0,0.05);
    }
    .filterbutton:active{
        background-color: rgba(0,0,0,0.15);
    }
    .preconfirmed{
        border: solid 2px !important;
    }

    .responselistitem{
        padding: 12px 24px;
        font-size: 12px;
        margin: 0px -30px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }
    .responselistitem .error{
        font-weight: bold;
        color: rgb(151 0 0);
    }
    .responselistitem p{
        margin-top:4px;
        margin-bottom:0px;
    }
    .responselistdate{
        font-weight: 600;
    }
    #modal-bookingresponselist-header{
        margin-bottom:0;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@5.1.0/main.min.js"
    integrity="sha256-whipTPgW7h5J4dASYqBjimA0wUdvXKQuecTKB5wOkxk=" crossorigin="anonymous"></script>
<script src="/javascripts/timeago.min.js"></script>
<script src="/javascripts/scrollto.min.js"></script>
<script src="/javascripts/humandate.min.js"></script>
<div id="calendarSection" class="section" style="max-width: 2000px;flex-basis: 1200px;">
    <div class="sectionheader">Booking calendar<div id="booking-spinner" class="spinner"></div></div>
    <div style="display: flex;">
        <div class="requestBigContainer">
            <div style="position: relative;">
                <span style="font-weight:bold;font-size:20px;">Requests</span>
                <div class="filterbutton" onclick="toggleFilter()"><i class="fas fa-filter"></i> Filter</div>
            </div>
            <div id="bookingbatchesContainer" class="requestContainer">
                <ul id="bookingbatches" class="postlist">

                </ul>
            </div>
            <div id="filter-noresults" style="display:none;position: absolute;top: 50%;text-align: center;width: calc(100% - 12px);font-size: 12px;">No results</div>
            <div id="filterPanel" class="filterPanel" style="display: none;">
                <div class="togglecontainer">
                    <div>
                        <input id="filter-showactive" class="toggle" type="checkbox" <% if(filtertoshow.includes('active')){ %>checked<% } %>>
                        <label for="filter-showactive"></label>
                    </div>
                    <label for="filter-showactive">Show active requests</label>
                </div>
                <hr style="opacity:0.25">
                <div class="togglecontainer">
                    <div>
                    <input id="filter-showarchive" class="toggle" onchange="archivestatechange()" type="checkbox" <% if(filtertoshow.includes('archived')){ %>checked<% } %>>
                        <label for="filter-showarchive"></label>
                    </div>
                    <label for="filter-showarchive">Show archived requests</label>
                </div>
                <div class="togglecontainer small" <% if(!filtertoshow.includes('archived')){ %>style="opacity:0.5;"<% } %>>
                    <div>
                    <input id="filter-archivethisyearonly" <% if(!filtertoshow.includes('archived')){ %>disabled<% } %> class="toggle small" type="checkbox" <% if(!filtertoshow.includes('alltime')){ %>checked<% } %>>
                        <label for="filter-archivethisyearonly"></label>
                    </div>
                <label for="filter-archivethisyearonly">For currently selected year only</label>
                </div>
                <button class="smallbtn" style="width:100%;margin-top:12px;" onclick="applyfilter()">Apply</button>
            </div>
            <script>
                function toggleFilter(){
                    $("#filterPanel").slideToggle(300);
                }
                function applyfilter(){
                    let showquery=[]
                    if($("#filter-showactive").prop("checked")) showquery.push("active");
                    if($("#filter-showarchive").prop("checked")){
                        showquery.push("archived");
                        if(!$("#filter-archivethisyearonly").prop("checked"))
                            showquery.push("alltime")
                    }
                    let yearquery = "";
                    let activeyear = calendar.view.activeStart.getFullYear();
                    if(new Date().getFullYear() != activeyear && showquery.includes("archived") && !showquery.includes("alltime")) {
                        //it's not the active year and we're showing archived requests, but only for the current year
                        yearquery = "&year="+activeyear
                    }
                    window.history.pushState({}, null, '/admin/equipment?show='+showquery.join(',')+yearquery);
                    reloadBookings();
                    $("#filterPanel").slideUp(300);
                }
                function archivestatechange(){
                    if($("#filter-showarchive").prop("checked")){
                        $("#filter-archivethisyearonly").prop("disabled", false);
                        $("#filter-archivethisyearonly").parent().parent().css("opacity", "1");
                    }
                    else{
                        $("#filter-archivethisyearonly").prop("disabled", true);
                        $("#filter-archivethisyearonly").parent().parent().css("opacity", "0.5");
                    }
                }
            </script>
        </div>
        <div id="calendar"></div>
    </div>
</div>
<div class="section" style="flex-basis:700px;">
    <div class="sectionheader">Equipment<div id="equipment-spinner" class="spinner"></div>
    </div>
    <div style="display: none;font-size:12px;font-weight: normal;margin-top:4px;">Drag to reorder</div>
    <ul id="equipmentlist" class="postlist" style="margin-top: -12px;margin-bottom: -12px;">
        <% if(locals.equipment) { %>
        <% equipment.forEach(equip=>{ %>
        <li class="postitem" style="padding:10px 24px;" data-id="<%= equip.id %>" data-position="<%= equip.position %>">
            <img src="<%= equip.image %>">
            <div style="margin-right:174px;">
                <h4><%= equip.name %></h4>
                <h6><%= equip.category %></h6>
                <h5><%= equip.description %></h5>
            </div>
            <div class="actions">
                <button onclick="editEquipment('<%= equip.id %>')"><i class="far fa-edit"></i></button>
                <button onclick="removeEquipment('<%= equip.id %>')"><i class="far fa-trash-alt"></i></button>
            </div>
        </li>
        <% }); %>
        <% } %>
    </ul><br>
    <button class="smallbtn" onclick="addEquipmentModal(true)">Add equipment</button>
</div>
<div id="modal-equipment" class="modal">
    <div id="modal-equipment-header" class="sectionheader">Add Equipment</div>
    <input id="createequipment-name" type="text" class="smaller" placeholder="Name ('Neewer Light Stand')"
        autocomplete="off"><br>
    <input id="createequipment-description" type="text" class="smaller"
        placeholder="Description ('2m stand, compatible with the LED Panels and the SLB60')" autocomplete="off"><br>
    <input id="createequipment-image" type="text" class="smaller" placeholder="Image URL" autocomplete="off"><br>
    <input id="createequipment-category" type="text" class="smaller" placeholder="Category (e.g. Light equipment)"
        autocomplete="off"><br>
    <button class="bigbtn" onclick="saveEquipment()">SAVE</button>
</div>
<div id="modal-bookingresponselist" class="modal">
    <div id="modal-bookingresponselist-header" class="sectionheader">Response history</div>
    <div id="modal-bookingresponselist-list">

    </div>
</div>
<div id="modal-bookingresponse" class="modal">
    <div id="modal-bookingresponse-header" class="sectionheader">Respond to booking request<div id="bookingresponse-spinner" class="spinner"></div>
    </div>
    <div class="togglecontainer">
        <div>
            <input id="bookingresponse-archive" class="toggle" type="checkbox">
            <label for="bookingresponse-archive"></label>
        </div>
        <label for="bookingresponse-archive">Archive Booking Request</label>
    </div>
    <div class="togglecontainer">
        <div>
            <input onchange="sendemailtoggle()" id="bookingresponse-sendemail" class="toggle" type="checkbox" checked>
            <label for="bookingresponse-sendemail"></label>
        </div>
        <label for="bookingresponse-sendemail">Notify student of response</label>
    </div>
    <div id="bookingresponse-messagecontainer">
        <p style="
        font-size: 12px;margin-bottom: 6px;">Please explain why the booking may have been edited or denied, or any additional information about retrieving and
            dropping off the equipment:</p>
        <textarea id="bookingresponse-text" style="font-size:12px;"></textarea>
        <p style="margin-top:0;font-size:10px">Message will be included in confirmation email to <span id="bookingresponse-email"></span></p>
    </div>


    <button id="bookingresponse-sendbtn" style="margin-top:12px;" class="bigbtn" onclick="sendBookingResponse()">CONFIRM RESPONSE</button>
</div>

<script>
    function sendemailtoggle(){
        if($("#bookingresponse-sendemail").prop("checked")){
            $("#bookingresponse-messagecontainer").slideDown(300);
        }
        else{
            $("#bookingresponse-messagecontainer").slideUp(300);
        }
    }
    function guidGenerator() {
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
    }

    let equipmentById = new Map(); 
    <% if (locals.equipment) { %>
        let equipmentlist = JSON.parse(`<%- JSON.stringify(locals.equipment) %>`);
        for (let i = 0; i < equipmentlist.length; i++) {
            equipmentById.set(equipmentlist[i].id, equipmentlist[i]);
        } 
    <% } %>


    let editingid;
    let editingposition;

    $('#equipmentlist').sortable({
        stop: function () {
            updatePositions();
        },
        animation: 150,
        axis: 'y'
    });

    function updatePositions() {
        let positionChanges = [];

        $('#equipmentlist .postitem').each(function (i, el) {
            let item = $(el);
            if (item.attr('data-position') != i) {
                item.attr('data-position', i);
                positionChanges.push({
                    id: item.attr('data-id'),
                    position: item.attr('data-position')
                });
            }
        });
        if (positionChanges && positionChanges.length > 0) {
            $("#equipmentlist").addClass("nopointer");
            $("#equipment-spinner").show();
            $.ajax({
                type: "POST",
                url: '/admin/equipment/items/reposition',
                dataType: 'text',
                contentType: "application/json",
                data: JSON.stringify(positionChanges),
                success: function (res) {
                    $("#equipmentlist").removeClass("nopointer");
                    $("#equipment-spinner").hide();
                },
                error: function (err) {
                    alert("Failed to reposition equipment items!");
                    $("#equipmentlist").removeClass("nopointer");
                    $("#equipment-spinner").hide();
                }
            });
        }
    }

    function generateEquipmentObject() {
        return {
            name: $("#createequipment-name").val(),
            description: $("#createequipment-description").val(),
            image: $("#createequipment-image").val(),
            category: $("#createequipment-category").val()
        }
    }

    function editEquipment(id) {
        $("#equipment-spinner").show();
        $.ajax({
            type: "GET",
            url: '/admin/equipment/items/' + id,
            success: function (res) {
                $("#equipment-spinner").hide();
                $("#createequipment-name").val(res.name);
                $("#createequipment-description").val(res.description);
                $("#createequipment-image").val(res.image);
                $("#createequipment-category").val(res.category);
                editingid = id;
                editingposition = res.position;
                $("#modal-equipment-header").text("Edit Equipment");
                addEquipmentModal();
            }
        });
    }

    function removeEquipment(id) {

        if (confirm(
                "Are you absolutely sure you want to delete this item? Any bookings for it will be unreversebly deleted!"
                )) {
            $("#equipment-spinner").show();
            $.ajax({
                type: "POST",
                url: '/admin/equipment/items/remove/' + id,
                success: function (res) {
                    $(`#equipmentlist [data-id='${id}']`).remove();
                    $("#equipment-spinner").hide();
                },
                error: function (err) {
                    alert("Failed to remove item!");
                    $("#equipment-spinner").hide();
                }
            });
        }
    }

    function saveEquipment() {
        var equipmentObject = generateEquipmentObject();
        $("#equipment-spinner").show();
        if (editingid) {
            equipmentObject.position = editingposition;
            equipmentObject.id = editingid;
            $.ajax({

                type: "POST",
                url: '/admin/equipment/items/edit/' + editingid,
                dataType: 'text',
                contentType: "application/json",
                async: true,
                //json object to sent to the authentication url
                data: JSON.stringify(equipmentObject),
                success: function (res) {
                    console.log("edit successful");
                    $(`#equipmentlist [data-id='${editingid}']`).remove();
                    addEquipmentToUI(equipmentObject);
                    $.modal.close();
                    $("#equipment-spinner").hide();
                },
                error: function (res) {
                    if (res.errors != undefined) {
                        var alertText = "";
                        alert(res.errors.join("\n"));
                        $("#equipment-spinner").hide();
                    }
                },
            });
        } else {
            equipmentObject.position = equipmentObject.length != undefined ? equipmentObject.length :
            0; //if the length isn't undefined, return it. Otherwise, return 0
            $.ajax({
                type: "POST",
                url: '/admin/equipment/items/create',
                dataType: 'text',
                contentType: "application/json",
                async: true,
                //json object to sent to the authentication url
                data: JSON.stringify(equipmentObject),
                success: function (res) {
                    $.modal.close();
                    addEquipmentToUI(JSON.parse(res));
                    $("#equipment-spinner").hide();
                    //TODO add equipment to DOM
                },
                error: function (res) {
                    if (res.errors != undefined) {
                        var alertText = "";
                        alert(res.errors.join("\n"));
                        $("#equipment-spinner").hide();
                    }
                },
            });
        }
    }

    function addEquipmentModal(blank) {
        if (blank) {
            $("#createequipment-name").val('');
            $("#createequipment-description").val('');
            $("#createequipment-image").val('');
            $("#createequipment-category").val('');
        }
        $("#modal-equipment").modal({clickClose:false});
    }

    let respondingBookings = [];
    let respondingId;

    function addBookingResponseModal(id) {
        respondingId = id;
        respondingBookings = [];
        let bookingbatch = $("#bookingbatches .batchid-" + id);
        let confirmedLength = 0;
        let deniedLength = 0;
        let editedLength = 0;
        bookingbatch.find(".eqBooking").each((i, el) => {
            let id = $(el).attr("data-id");
            let event = calendar.getEventById(id);
            let booking = {
                id: id,
                start: event.startStr,
                end: event.endStr,
            };
            if ($(el).find(".confirm.select").length > 0) {
                booking.confirmstate = 1;
                confirmedLength++;
            } else if ($(el).find(".deny.select").length > 0) {
                booking.confirmstate = 2;
                deniedLength++;
            } else if ($(el).find(".edit.select").length > 0) {
                booking.confirmstate = 3;
                editedLength++;
            }
            respondingBookings.push(booking);
        });
        let message = "";
        if (confirmedLength > 0 && deniedLength == 0 && editedLength == 0) {
            message = "Accepted all equipment requests";
        } else if (deniedLength > 0 && confirmedLength == 0 && editedLength == 0) {
            message = "Denied all equipment requests";
        } else if (editedLength > 0 && confirmedLength == 0 && deniedLength == 0) {
            message = "Edited all equipment requests";
        } else {
            if (confirmedLength == 1)
                message =
                `Accepted ${confirmedLength} equipment request, edited ${editedLength}, and denied ${deniedLength}`
            else
                message =
                `Accepted ${confirmedLength} equipment requests, edited ${editedLength}, and denied ${deniedLength}`
        }
        $("#bookingresponse-text").val(message);
        $("#bookingresponse-archive").attr('checked', true);
        $("#bookingresponse-email").text(bookingbatch.find(".studentDetails-email").text());
        $("#modal-bookingresponse").modal({clickClose:false});
    }

    function sendBookingResponse() {
        $("#bookingresponse-spinner").show();
        $("#bookingresponse-sendbtn").attr("disabled", true);
        $.ajax({
            type: "POST",
            url: '/admin/equipment/bookings/' + respondingId,
            dataType: 'text',
            contentType: "application/json",
            data: JSON.stringify({
                archive: $("#bookingresponse-archive").is(":checked"),
                bookings: respondingBookings,
                message: $("#bookingresponse-text").val(),
                sendemail: $("#bookingresponse-sendemail").is(":checked")
            }),
            success: function (res) {
                $("#bookingresponse-spinner").hide();
                $("#bookingresponse-sendbtn").attr("disabled", false);
                $.modal.close();
                reloadBookings();
            },
            error: function (err) {
                alert(err);
                $("#bookingresponse-spinner").hide();
                $("#bookingresponse-sendbtn").attr("disabled", false);
                reloadBookings();
            }
        });
    }


    function sortPostItems(a, b) {
        const startA = parseInt($(a).data('position'));
        const startB = parseInt($(b).data('position'));
        return startA - startB;
    }

    function addEquipmentToUI(equipmentObject) {
        $("#equipmentlist").append(`        <li class="postitem" style="padding:10px 24px;" data-id="${equipmentObject.id}" data-position="${equipmentObject.position}">
            <img src="${equipmentObject.image}">
            <div style="margin-right:174px;">
                <h4>${equipmentObject.name}</h4>
                <h6>${equipmentObject.category}</h6>
                <h5>${equipmentObject.description}</h5>
            </div>
            <div class="actions">
                <button onclick="editEquipment('${equipmentObject.id}')"><i class="far fa-edit"></i></button>
                <button onclick="removeEquipment('${equipmentObject.id}')"><i class="far fa-trash-alt"></i></button>
            </div>
        </li>`);
        $('#equipmentlist').html($('#equipmentlist .postitem').sort(sortPostItems))
    }

    $("#modal-equipment").on($.modal.CLOSE, function (event, modal) {
        editingid = undefined;
        $("#modal-equipment-header").text("Add Equipment");
    });
    $("#modal-equipment, #modal-bookingresponse").on($.modal.OPEN, function(event,modal){
        $('div.jquery-modal.blocker.current').mousedown(function(e) { 
          if ($(e.target).hasClass('blocker')) $.modal.close();
        });
    });


    let resources = undefined; 
    <% if (locals.equipment) { %>
        resources = JSON.parse(`<%- JSON.stringify(locals.equipment) %>`); 
    <% } %>

    var calendar;
    let previousURL = location.href;
    document.addEventListener('readystatechange', function () {
        if (document.readyState != "interactive") return;
        let today = new Date();
        let startDate = new Date(today.getFullYear()+"-09-01");
        if(today.getMonth()<8) startDate = new Date((today.getFullYear()-1)+"-09-01");
        let nowIndicator = Math.floor((today - startDate) / (1000 * 60 * 60))-48+":00";

        var calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'resourceTimelineAcademicYear',
            headerToolbar: false,
            slotMinWidth: 22,
            schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
            resourceGroupField: 'category',
            selectable: true,
            selectMirror: true,
            nowIndicator: true,
            now: new Date(),
            scrollTime: nowIndicator,
            contentHeight: "auto",
            resourcesInitiallyExpanded: true,
            selectOverlap: false,
            slotDuration: "12:00:00",
            slotLabelInterval: "24:00:00",
            slotLabelFormat: [{
                    year: "numeric"
                },
                {
                    month: "long"
                },
                {
                    weekday: "short"
                },
                {
                    day: "2-digit"
                }
            ],
            customButtons:{
                prevYearCustom:{
                    text:"<",
                    click:function(){
                        calendar.prevYear();
                        applyfilter();
                    }
                },
                nextYearCustom:{
                    text:">",
                    click:function(){
                        calendar.nextYear();
                        applyfilter();
                    }
                }
            },
            headerToolbar:{
              start: 'prevYearCustom', // will normally be on the left. if RTL, will be on the right
              center: 'title',
              end: 'nextYearCustom' // will normally be on the right. if RTL, will be on the left
            },
            views: {
                resourceTimelineAcademicYear:{
                    type: 'resourceTimeline',
                    visibleRange: function(currentDate){
                        let today = new Date(currentDate.valueOf());
                        let year = today.getFullYear();
                        if(today.getMonth()>7){
                            //after the 1st of September
                            return{
                                start: new Date(year+"-09-01"),
                                end: new Date((year+1)+"-08-31")
                            }
                        }
                        else{
                            //before the 1st of September
                            return{
                                start: new Date((year-1)+"-09-01"),
                                end: new Date(year+"-08-31")
                            }
                        }
                    }
                }
            },
            resourceOrder: 'position',
            resources: resources,
            events: individualbookings,
            resourceLabelContent: function (arg) {
                let props = arg.resource.extendedProps;
                return props.name;
            },
            resourceAreaHeaderContent: function (arg) {
                return "";
            },
            eventContent: function (arg) {
                let daysStyle = "";
                let daysoffset = getDaysOffset(arg.event);
                if (daysoffset == "0.5 DAY") {
                    daysoffset = "HALF DAY";
                    daysStyle = "transform:rotate(-90deg);left:-4px;line-height:8px;bottom:4px;";
                    //daysoffset="<span>0.5</span><br><span style='font-size:6px;'>DAY</span>";
                }
                let html = `
                <div class="calendarEvent">
                    <div class="calendarEvent-projectname">${arg.event.extendedProps.batchname}</div>
                    <div class="calendarEvent-length" style="${daysStyle}">${daysoffset}</div>
                </div>
                `
                return {
                    html: html
                }
            },
            eventMouseEnter: function (e) {
                highlightItem(e.event.id, e.event.extendedProps.batchid);
                highlightBatch(e.event.extendedProps.batchid);
            },
            eventMouseLeave: function (e) {
                unhighlightItem();
                unhighlightBatch();
            },
            eventClick: function (e) {
                e.jsEvent.preventDefault();
                scrollToItemList(e.event.id, e.event.extendedProps.batchid);
            }
        });
        calendar.render();
        $("#mainform").show();
        $(".spinner").hide();
        loadBookings();
        let queryyear = undefined;
        <% if(locals.year) { %> 
            queryyear = <%= locals.year %>; 
        <% } %>
        if(queryyear){
            calendar.gotoDate(queryyear+"-09-01")
        }
    });


    function highlightBatch(id) {
        $(`.fc-timeline-event:not(.batchid-${id})`).addClass("ignored");
        $(`#bookingbatches .postitem:not(.batchid-${id})`).addClass("ignored");
        $(`#bookingbatches .postitem.batchid-${id}`).addClass("batchhover");
    }

    function highlightItem(id, batchid) {
        $(`.fc-timeline-event.id-${id}`).addClass("eventhover");
        $(`#bookingbatches .eqBooking.id-${id}`).addClass("eventhover");
        $(`.fc-timeline-event.batchid-${batchid}:not(.id-${id})`).addClass("partialignored");
    }

    function unhighlightBatch() {
        $(".fc-timeline-event").removeClass("ignored");
        $(`#bookingbatches .postitem`).removeClass(["ignored", "batchhover"]);
    }

    function unhighlightItem() {
        $(`.fc-timeline-event`).removeClass("eventhover");
        $(`.fc-timeline-event`).removeClass("partialignored");
        $(`#bookingbatches .eqBooking`).removeClass("eventhover");
    }

    function scrollToItemList(id, batchid) {
        let batchItem = $("#bookingbatches .batchid-" + batchid);
        batchItem.find(".bookingdetails").slideDown(undefined, function () {
            let bookingItem = batchItem.find(".id-" + id);
            if (!isElementVisible(bookingItem[0], $("#bookingbatchesContainer")[0])) {
                $("#bookingbatchesContainer").scrollTo(bookingItem, 200);
            }

        });
    }

    function isElementVisible(el, holder) {
        holder = holder || document.body
        const {
            top,
            bottom,
            height
        } = el.getBoundingClientRect()
        const holderRect = holder.getBoundingClientRect()
        return top <= holderRect.top ?
            holderRect.top - top <= height :
            bottom - holderRect.bottom <= height
    }

    function removeEvent(id) {
        calendar.getEventById(id).remove();
    }

    function getDaysOffset(event) {
        let diff = (event.end - event.start) / (1000 * 60 * 60 * 24)
        if (diff <= 1) return diff + " DAY";
        else return diff + " DAYS";
    }

    function getNightsOffset(event) {
        let diff = (event.end - event.start) / (1000 * 60 * 60 * 24)
        if (diff <= 1) return diff + " DAY";
        else return diff + " DAYS";
    }

    let individualbookings = [];
    let batchesById = new Map();
    let bookingbatches = {};
    <% if (locals.bookings) { %>
        bookingbatches = <%- JSON.stringify(bookings) %>;
    <% } %>

    function reloadBookings(){
        $("#booking-spinner").show();
        $.ajax({
            type: "GET",
            url: window.location+"&ajax=true",
            success: function (res) {
                bookingbatches = res;
                batchesById = new Map();
                individualbookings = [];
                initialBookingLoad();
                calendar.removeAllEventSources();
                calendar.addEventSource(individualbookings);
                loadBookings();
                $("#booking-spinner").hide();
            },
            error: function (err) {
                alert("Failed to reload bookings! " + err);
                $("#booking-spinner").hide();
            }
        });
    }
    

    function initialBookingLoad(){
        if(Object.getOwnPropertyNames(bookingbatches).length === 0){
            $("#filter-noresults").show();
        } 
        else {
            $("#filter-noresults").hide();
        }
        for (let i in bookingbatches) {
            const booking = bookingbatches[i];
            batchesById.set(booking.id, booking);
            for (let i = 0; i < booking.bookings.length; i++) {
                individualbookings.push({
                    start: booking.bookings[i].start,
                    end: booking.bookings[i].end,
                    resourceId: booking.bookings[i].equipmentid,
                    id: booking.bookings[i].id,
                    classNames: ["batchid-" + booking.id, "id-" + booking.bookings[i].id],
                    batchid: booking.id,
                    batchname: booking.projectname,
                    color:'rgba(0, 0, 0, 0.25)',
                    textColor:'rgba(255, 255, 255, 1)'
                });
                booking.bookings[i].timespan = humanizeDate(booking.bookings[i].start) +
                    "&nbsp;<i class='fas fa-arrow-right'></i>&nbsp;" + humanizeDate(booking.bookings[i].end)
                booking.bookings[i].timeid = new Date(booking.bookings[i].start).valueOf() + new Date(booking.bookings[
                    i].end).valueOf() + booking.id;
            }

            for (let i = 0; i < booking.bookings.length; i++) {
                booking.bookings[i].equipment = equipmentById.get(booking.bookings[i].equipmentid);
            }
            booking.bookings.sort((a, b) => b.equipment.position - a.equipment.position);
            booking.bookings.sort((a, b) => (a.timespan > b.timespan) ? 1 : -1)
        }
    }
    initialBookingLoad();
    function loadBookings() {
        $("#bookingbatches").empty();
            for (let i in bookingbatches) {
                let bookinglength = 0;
                const booking = bookingbatches[i];
                if (booking.bookings && booking.bookings.length && booking.bookings.length > 0)
                    bookinglength = booking.bookings.length;

                let previoustimespan = undefined;
                let items = ``;
                let anyconfirmed = false;
                for (let i = 0; i < booking.bookings.length; i++) {
                    const item = booking.bookings[i];
                    let currenttimeid = "";
                    if (item.timespan != previoustimespan) {
                        if (previoustimespan != undefined) items += "</div>";



                        items += `<div class="timespan"><span>${item.timespan}</span>
                                        <div class="actions eqActions" style="opacity:0.5">
                                            <button title="Accept" class="confirm" onmouseover="selectall('mouseover', this, '${item.timeid+"a"}')" onmouseout="selectall('mouseout', this, '${item.timeid+"a"}')" onclick="selectall('click', this, '${item.timeid+"a"}')"><i class="fas fa-check"></i></button>
                                            <button title="Edit" class="edit" onmouseover="selectall('mouseover', this, '${item.timeid+"c"}')" onmouseout="selectall('mouseout', this, '${item.timeid+"c"}')" onclick="selectall('click', this, '${item.timeid+"c"}')"><i class="fas fa-pen"></i></button>
                                            <button title="Deny" class="deny" onmouseover="selectall('mouseover', this, '${item.timeid+"b"}')" onmouseout="selectall('mouseout', this, '${item.timeid+"b"}')" onclick="selectall('click', this, '${item.timeid+"b"}')"><i class="fas fa-times"></i></button>
                                        </div>
                                      </div><div class="eqBookingGroup">`;
                        previoustimespan = item.timespan;
                        currenttimeid = item.timeid;
                    }
                    if(item.confirmstate != 0){
                        anyconfirmed = true;
                        incalendarState(item.id,item.confirmstate);
                    }
                    let acceptselect = (item.confirmstate == 1) ? "select preconfirmed" : "";
                    let denyselect = (item.confirmstate == 2) ? "select preconfirmed" : "";
                    let editselect = (item.confirmstate == 3) ? "select preconfirmed" : "";

                    items += `
                        <div class="eqBooking id-${item.id}" onmouseenter="highlightItem('${item.id}', '${booking.id}')" data-id="${item.id}" onmouseleave="unhighlightItem()">
                            <div class="eqName">${item.equipment.name}</div>
                            <div class="actions eqActions">
                                <button title="Accept" class="confirm ${acceptselect}" data-id=${item.id} data-timeid="${item.timeid+"a"}" onclick="select(this, '${item.id}')"><i class="fas fa-check"></i></button>
                                <button title="Edit" class="edit ${editselect}" data-id=${item.id} data-timeid="${item.timeid+"c"}" onclick="select(this, '${item.id}')"><i class="fas fa-pen"></i></button>
                                <button title="Deny" class="deny ${denyselect}" data-id=${item.id} data-timeid="${item.timeid+"b"}" onclick="select(this, '${item.id}')"><i class="fas fa-times"></i></button>
                            </div>
                        </div>
                        `
                }
                items += "</div>";
                let logos = "";
                let setarchive = 1;
                let archivetext = "Archive request";
                if(booking.archived) {
                    logos += `<i title="Archived request" class="fas fa-archive"></i>&nbsp;`;
                    setarchive = 0;
                    archivetext = "Dearchive request";
                }
                if(booking.responses){
                    try{
                        booking.responses = JSON.parse(booking.responses);
                    }
                    catch{
                        booking.responses = undefined;
                    }
                }
                if(booking.responses && booking.responses.length > 0){
                    logos += `<i title="Response sent" class="fas fa-reply"></i>&nbsp;`
                }
                let sendresponseText = "CONFIRM RESPONSE";
                if(anyconfirmed) sendresponseText = "UPDATE RESPONSE";
                let responseDetails = "";
                console.log(booking.responses);
                if(booking.responses && booking.responses.length >0){
                    responseDetails = `
                    <div class="studentDetails">
                        <i class="fas fa-reply"></i>
                        <div>
                            <h4>${booking.responses.length} response(s) sent to student</h4>
                            <h5>Last sent ${timeago.format(booking.responses[booking.responses.length-1].date)}</h5>
                            
                            <button class="smallbtn" onclick="responsehistory('${booking.id}')">View Responses</button>
                            
                        </div>
                    </div>`
                }
                $("#bookingbatches").append(`
                    <li class="postitem batchid-${booking.id}" onmouseenter="highlightBatch('${booking.id}')" onmouseleave="unhighlightBatch()" style="padding:10px 24px;">
                        <div>
                            <div class="bookingheader">
                                
                            <h6 style="float:right;margin-top:4px;" title="${humandate.prettyPrint(new Date(booking.creationtime), {showTime:true})}" class="timeagorender" datetime="${booking.creationtime}"></h6>
                            <h4>${logos + booking.projectname}</h4>
                            <h5>${bookinglength} item(s) requested</h5>
                            </div>
                            <div class="bookingdetails" style="display:none;">
                                <div class="studentDetails">
                                    <i class="fas fa-comment"></i>
                                    <div>
                                        <h4>Project Description</h4>
                                        <p>${booking.projectdescription}</p>
                                    </div>
                                </div>
                                <div class="studentDetails">
                                    <i class="fas fa-user"></i>
                                    <div>
                                        <h4>${booking.studentname}</h4>
                                        <span>Student ID:&nbsp;</span><code>${booking.studentid}</code><br>
                                        <span>Email:&nbsp;</span><a href="mailto:${booking.studentemail}"><code class="studentDetails-email">${booking.studentemail}</code></a>
                                    </div>
                                </div>
                                ${responseDetails}
                                <div class="eqBookings">
                                    ${items}
                                </div>
                                <a style="font-size:10px;" target="_blank" href="/equipment?view=${booking.id}">View on user-facing website</a>
                                <button class="bigbtn" onclick="addBookingResponseModal('${booking.id}')">${sendresponseText}</button>
                                
                                <button style="width:calc(50% - 2px)" class="smallbtn inline" onclick="deletebooking('${booking.id}')">Delete request</button>
                                <button style="width:calc(50% - 2px)" onclick="archiveRequest('${booking.id}', ${setarchive})" class="smallbtn inline">${archivetext}</button>
                            </div>
                        </div>
                    </li>
                    `);
                timeago.render(document.querySelectorAll(".timeagorender"));
            }
        $("#bookingbatches .bookingheader").click(function (e) {
            $(this).siblings(".bookingdetails").slideToggle(100);
        });
    }

    function responsehistory(id){
        let batch = batchesById.get(id);
        $("#modal-bookingresponselist-list").empty();

        if(batch){
            batch.responses.reverse();
            let listhtml = "";
            for (let i = 0; i < batch.responses.length; i++) {
                let response = batch.responses[i];
                listhtml+=`
                <div class="responselistitem">
                    <div class="responselistdate">${humandate.prettyPrint(new Date(response.date), {showTime:true})}</div>
                    <p>${response.content}</p>
                </div>
                `
            }
            $("#modal-bookingresponselist-list").append(listhtml);
        }
        $("#modal-bookingresponselist").modal();
    }

    function updatecalendareventState(id) {
        let item = $(".eqBooking.id-" + id);
        if (item.find(".confirm").hasClass("select")) {
            //accepted
            incalendarState(id, 1);
        } else if (item.find(".deny").hasClass("select")) {
            //denied
            incalendarState(id, 2);
        } else if (item.find(".edit").hasClass("select")) {
            incalendarState(id, 3);
        } else {
            //unanswered
            incalendarState(id, 0);
        }
    }

    function select(e, id) {
        let btn = $(e);
        if (btn.hasClass("select")) {
            btn.removeClass("select");
        } else {
            btn.siblings("button").removeClass("select");
            btn.addClass("select");
        }
        updatecalendareventState(id);
    }

    function updateEventState() {

    }

    function incalendarState(id, state) {
        let event = calendar.getEventById(id);
        if (state == 3) {
            event.setProp('editable', true);
            event.setExtendedProp('realStart', event.start);
            event.setExtendedProp('realEnd', event.end);
            if ((event.extendedProps.editStart && event.extendedProps.editStart != event.start) ||
                (event.extendedProps.editEnd && event.extendedProps.editEnd != event.end)) {
                event.setDates(event.extendedProps.editStart, event.extendedProps.editEnd);
            }
            event.setProp('color', 'rgb(169, 110, 0)');
            event.setProp('textColor', 'rgba(255, 255, 255, 1)');
        } else {

            if ((event.extendedProps.realStart && event.extendedProps.realStart != event.start) ||
                (event.extendedProps.realEnd && event.extendedProps.realEnd != event.end)) {
                event.setExtendedProp('editStart', event.start);
                event.setExtendedProp('editEnd', event.end);
                event.setDates(event.extendedProps.realStart, event.extendedProps.realEnd);
            }

            event.setProp('editable', false);
            if (state == 0) {
                //unconfirmed
                event.setProp('color', 'rgba(0, 0, 0, 0.25)');
                event.setProp('textColor', 'rgba(255, 255, 255, 1)');
            } else if (state == 1) {
                //confirmed
                event.setProp('color', 'rgb(5, 117, 63)');
                event.setProp('textColor', 'rgba(255, 255, 255, 1)');
            } else if (state == 2) {
                //refused
                event.setProp('color', 'rgb(117, 5, 20)');
                event.setProp('textColor', 'rgba(255, 255, 255, 0.5)');
            }
        }
    }

    function selectall(op, e, timeid) {
        let btn = $(`[data-timeid="${timeid}"]`);
        if (op == "mouseover") {
            btn.addClass('hover');
        } else if (op == "mouseout") {
            btn.removeClass('hover');
        } else if (op == "click") {
            if (btn.hasClass("select")) {
                btn.removeClass("select");
            } else {
                btn.siblings("button").removeClass("select");
                btn.addClass("select");
            }
            btn.each((i) => {
                updatecalendareventState(btn[i].getAttribute("data-id"));
            });
        }
    }

    function humanizeDate(input) {
        input = new Date(input);
        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September",
            "October", "November", "December"
        ]
        var monthName = monthNames[input.getMonth()]
        var dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
        var dayName = dayNames[input.getDay()]
        var date = input.getDate();
        return `${dayName} ${input.getDate()}/${input.getMonth()}`;
    }

    function deletebooking(id) {
        if (confirm(
                "Are you absolutely sure you want to do this? If it's absolutely impossible for someone to borrow some equipment, make sure you've let them know why BEFORE deleting the booking"
                )) {
            if (confirm(
                    "This action is irreversible: PLEASE MAKE SURE YOU'VE CONTACTED WHOEVER REQUESTED THIS EQUIPMENT BEFORE DELETING THE REQUEST"
                    )) {
                $.ajax({
                    type: "POST",
                    url: '/admin/equipment/bookings/remove/' + id,
                    success: function (res) {
                        applyfilter();
                    },
                    error: function (err) {
                        alert("Failed to delete booking!");
                    }
                });
            }
        }
    }

    function archiveRequest(id, archivestate){
        $("#booking-spinner").show();
        $.ajax({
                type: "POST",
                url: `/admin/equipment/bookings/archive/${id}/${archivestate}`,
                success: function (res) {
                    applyfilter();
                },
                error: function (err) {
                    alert("Failed to archive booking!");
                    $("#booking-spinner").hide();
                }
            });
    }
</script>
</div>
</div>